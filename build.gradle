plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
}

ext {
    MINECRAFT_VERSION = rootProject.minecraft_version.split(/[+ -]/)[0]
    NEXT_MINECRAFT_VERSION = rootProject.next_minecraft_version.split(/[+ -]/)[0]
    JAVA_VERSION = JavaVersion.toVersion(rootProject.java_version)
    JAVA_VERSION_INT = JAVA_VERSION.ordinal() + 1
}

architectury {
    minecraft = project.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "architectury-plugin"

    group = rootProject.maven_group
    version = createVersionString()

    base {
        archivesName = "${rootProject.archives_name}-${project.name}"
    }

    repositories {
        maven {
            url "https://api.modrinth.com/maven/"
            content { includeGroup "maven.modrinth" }
        }

        maven {
            url "https://maven.shedaniel.me/"
            content { includeGroup "me.shedaniel" }
        }

        maven {
            url "https://maven.terraformersmc.com/releases/"
            content { includeGroup "com.terraformersmc" }
        }

        maven { url "https://maven.neoforged.net/releases/" }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered {
            it.mappings("net.fabricmc:yarn:${rootProject.yarn_mappings}:v2")
            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:${rootProject.yarn_mappings_patch_neoforge_version}")
        }
    }

    processResources {
        filesMatching("*.mixins.json") {
            expand java: 17 // FIXME: Mixins do not support JAVA_21 just yet
        }
    }

    java {
        withSourcesJar()

        sourceCompatibility = JAVA_VERSION
        targetCompatibility = JAVA_VERSION
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.options.release = JAVA_VERSION_INT
    }
}

String createVersionString() {
    StringBuilder builder = new StringBuilder()
    String buildId = System.getenv("GITHUB_RUN_NUMBER")
    String githubRef = System.getenv("GITHUB_REF")
    String modRelease = System.getenv("MOD_RELEASE")
    boolean isRelease = (
        githubRef && githubRef.startsWith("refs/tags/") ||
        modRelease == "1"
    )

    if (isRelease) {
        builder.append(rootProject.mod_version.split(/-/)[0])
    } else {
        builder.append(rootProject.mod_version)
        if (buildId) {
            builder.append("-build.${buildId}")
        } else {
            builder.append("-snapshot")
        }
    }
    builder.append("+mc").append(MINECRAFT_VERSION)

    return builder.toString()
}
